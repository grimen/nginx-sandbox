
# DOCS:
#   - http://nginx.org/en/docs/
#   - http://nginx.org/en/docs/http/ngx_http_core_module.html#variables

# http://nginx.org/en/docs/ngx_core_module.html#daemon
#
# Run as daemon?
#
daemon off;

# http://nginx.org/en/docs/ngx_core_module.html#master_process
#
# master_process on;

# http://nginx.org/en/docs/ngx_core_module.html#pid
#
# Master process PID.
#
pid 'tmp/nginx.pid';

# If the master process is run as root, then nginx will setuid()/setgid() to USER/GROUP.
# If GROUP is not specified, then nginx uses the same name as USER.
# By default it's nobody user and nobody or nogroup group or the --user=USER and --group=GROUP from the ./configure script.
# user nginx nginx;

# http://nginx.org/en/docs/ngx_core_module.html#worker_processes
#
# A worker process is a single-threaded process.
#
worker_processes 4; # ...assuming 2 cores.

# http://nginx.org/en/docs/ngx_core_module.html#worker_priority
#
# With this option you can give to all worker processes the priority you need/wish.
#
# worker_priority -5;

# http://nginx.org/en/docs/ngx_core_module.html#worker_cpu_affinity
#
# Your OS may schedule all workers on single CPU/core this can be avoided using this directive.
#
# worker_cpu_affinity 01 10; # ...assuming 2 cores. OSX: disable

# http://nginx.org/en/docs/ngx_core_module.html#worker_rlimit_nofile
#
# Number of file descriptors used for Nginx.
# This is set in the OS with `ulimit -n 10240` or using /etc/security/limits.conf
#
worker_rlimit_nofile 10240; # ...assuming 10240 file descriptors.

# http://nginx.org/en/docs/ngx_core_module.html#error_log
#
# Global error logs.
#
error_log 'logs/error.log';

# http://nginx.org/en/docs/ngx_core_module.html#pcre_jit
#
# PCRE/JIT.
#
pcre_jit on;

# http://nginx.org/en/docs/ngx_core_module.html#env
#
# The instruction allows to limit a set of variables of environment, to change it values or to create new variables.
#
env HTTP_PORT; # enable
env HTTPS_PORT; # enable
env TEST=123; # set custom


# Events
events {
  # http://nginx.org/en/docs/ngx_core_module.html#worker_connections
  #
  # This sets the number of connections that each worker can handle.
  # You can determine the value by using `ulimit -n` command which output is something like 1024, then your worker connections would need to be set to 1024 or less but 1024 is a good default setting.
  # You can work out the maximum clients value by multiplying this and the worker_processes settings.
  #
  worker_connections 10240; # ...assuming 10240 file descriptors.

  # http://nginx.org/en/docs/ngx_core_module.html#use
  #
  # Essential for linux, optmized to serve many clients with each thread.
  #
  # use epoll; # OSX: disable

  # http://nginx.org/en/docs/ngx_core_module.html#multi_accept
  #
  # Accept as many connections as possible, after nginx gets notification about a new connection.
  # May flood worker_connections, if that option is set too low.
  #
  # multi_accept on;
}

# HTTP
http {

  # -----------------------
  #  Defaults
  # --------------------

  include 'http/buffers.conf';
  include 'http/common.conf';
  include 'http/dns.conf';
  include 'http/gzip.conf';
  include 'http/limit.conf';
  include 'http/lua.conf';
  include 'http/log.conf';
  include 'http/mime.conf';
  include 'http/proxy.conf';
  include 'http/proxy_cache.conf';
  include 'http/spdy.conf';
  include 'http/ssl.conf';
  include 'http/tcp.conf';
  include 'http/timeout.conf';
  include 'http/tmp.conf';


  # -----------------------
  #  Proxies/Backends
  # --------------------

  # upstream @upstream {
  #   server 127.0.0.1:8000 weight=1;
  #   server 127.0.0.1:8001 weight=2 max_fails=3  fail_timeout=30s;
  #   server 127.0.0.1:8082 weight=2;
  #   server 127.0.0.1:8083
  #
  #   keepalive 1024 single; # connection pool
  # }

  # location @upstream {
  #   proxy_set_header Host $host;
  #   proxy_set_header X-Forwarded-Host $host;
  #   proxy_set_header X-Real-IP $remote_addr;
  #   proxy_set_header X-Forwarded-For $remote_addr;
  #   proxy_pass 'http://backend:$server_port';
  # }

  # -----------------------
  #  Server
  # --------------------

  # NOTE: For WebSocket.
  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  server {
    server_name nginx-sandbox.dev; # http://nginx.org/en/docs/http/server_names.html
    # server_name *.nginx-sandbox.dev;
    # server_name ~^(www\.)?(?<domain>.+)$;
    # server_name ~^((?<subdomain>.+)\.)?(?<domain>.+)$;

    # posix: so_keepalive=2s:2s:8
    listen 8080 default so_keepalive=on; # http
    listen 4433 default ssl spdy so_keepalive=on; # https + spdy

    root 'public';

    charset 'utf-8';
    default_type 'text/plain';


    # -----------------------
    #  Logging
    # --------------------

    access_log 'logs/access.log';
    error_log 'logs/error.log';


    # -----------------------
    #  SSL
    #   - https://coderwall.com/p/4k6wdq
    # --------------------

    ssl_certificate 'security/ssl/ca.crt';
    ssl_certificate_key 'security/ssl/ca.key';


    # -----------------------
    #  Variables
    # --------------------

    # Examples: Setting Nginx variables using Lua inline or file.
    # set_by_lua $now1 'return ngx.cookie_time(ngx.time())';
    # set_by_lua_file $now2 'conf/server/set.lua';

    # Access ENV variables from process/shell - enabled on Nginx core level (above).
    set_by_lua $TMP_PATH 'return os.getenv("TMP_PATH") or "/var/tmp"';
    set_by_lua $CACHE_PATH '
      local value = os.getenv("CACHE_PATH") or (os.getenv("TMP_PATH") or "/var/tmp").."/cache"
      os.execute("mkdir -p " .. value)
      return value
    ';
    set_by_lua $TEST 'return os.getenv("TEST")';
    set_by_lua $HTTP_PORT 'return os.getenv("HTTP_PORT")';
    set_by_lua $HTTPS_PORT 'return os.getenv("HTTPS_PORT")';
    set_by_lua $d 'return "$"';

    # (Variables available in Lua as ngx.var.<attr>)

    set $root '$realpath_root';
    set $tmp '$TMP_PATH';
    set $cache '$CACHE_PATH';
    set $config 'config';
    set $maintenance '$root/tmp/maintenance.html';
    set $secret 'secret';

    set $referer 'no-referer';
    if ($http_referer) {
      set $referer $http_referer;
    }


    # -----------------------
    #  IP
    # --------------------

    real_ip_header 'X-Real-IP';
    # set_real_ip_from 127.0.0.1;


    # -----------------------
    #  Response Headers
    # --------------------

    include 'http/headers.conf';


    # -----------------------
    #  Routes: Error
    # --------------------

    recursive_error_pages on;

    error_page 404 '/404.html';
    error_page 500 502 503 504 '/50x.html';


    # -----------------------
    #  Routes: Accept
    # --------------------

    location / {
      limit_except OPTIONS HEAD GET POST PUT PATCH DELETE {
       # allow 127.0.0.1;
       deny all;
      }

      if ($request_method = OPTIONS) {
        # (Reusing headers in `http/headers.conf`)
        # more_set_headers 'Access-Control-Allow-Origin: *';
        # more_set_headers 'Access-Control-Allow-Methods: OPTIONS, HEAD, GET';
        # more_set_headers 'Access-Control-Allow-Headers: Authorization';
        # more_set_headers 'Access-Control-Allow-Credentials: false';
        more_set_headers 'Content-Length: 0';
        more_set_headers 'Content-Type text/plain;';

        return 200;
      }

      include 'routes/common/cors_preflight.conf';

      # proxy_pass 'http://backend:$server_port/';
      try_files $maintenance $uri $uri/ =404;
    }

    # include 'routes/debug/livereload.conf'; # wip

    include 'routes/common/favicon.conf';
    include 'routes/common/robots.conf';
    include 'routes/common/system.conf';
    include 'routes/common/bots.conf';
    # include 'routes/common/localhost_only.conf';
    # include 'routes/common/assets_http_cache.conf';
    # include 'routes/common/assets_proxy_cache.conf';

    include 'routes/examples/lua.cache.conf';
    include 'routes/examples/lua.hello.conf';
    include 'routes/examples/lua.luarocks.conf';
    include 'routes/examples/lua.magick.conf';
    include 'routes/examples/lua.postbody.conf';
    include 'routes/examples/lua.redis.conf';
    include 'routes/examples/lua.websocket.conf';

    include 'routes/examples/nginx.alias.conf';
    include 'routes/examples/nginx.base64.conf';
    include 'routes/examples/nginx.basicauth.conf';
    include 'routes/examples/nginx.body.conf';
    include 'routes/examples/nginx.echo.conf';
    include 'routes/examples/nginx.env.conf';
    include 'routes/examples/nginx.escapeuri.conf';
    include 'routes/examples/nginx.ip.conf';
    include 'routes/examples/nginx.jsonp.conf';
    include 'routes/examples/nginx.md5.conf';
    include 'routes/examples/nginx.prefetch.conf';
    include 'routes/examples/nginx.redirect.conf';
    include 'routes/examples/nginx.rewrite.conf';
    include 'routes/examples/nginx.session.conf';
    include 'routes/examples/nginx.spdyhint.conf';
    include 'routes/examples/nginx.spdypush.conf';
    include 'routes/examples/nginx.status.conf';
    include 'routes/examples/nginx.variables.conf';

  }
}