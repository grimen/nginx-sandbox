
# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_bypass
#
# Defines conditions under which the response will not be taken from a cache.
# If at least one value of the string parameters is not empty and is not equal to “0” then the response will not be taken from the cache:
#
proxy_cache_bypass $http_pragma $http_authorization;
proxy_cache_bypass $http_upgrade; # Web Sockets

# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_key
#
# Defines a key for caching.
#
# proxy_cache_key "$host$request_uri $cookie_user";
proxy_cache_key "$scheme$proxy_host$uri$is_args$args";

# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_lock
#
# When enabled, only one request at a time will be allowed to populate a new cache element identified according to the proxy_cache_key directive by passing a request to a proxied server.
# Other requests of the same cache element will either wait for a response to appear in the cache or the cache lock for this element to be released, up to the time set by the proxy_cache_lock_timeout directive.
#
proxy_cache_lock off;
proxy_cache_lock_timeout 5s;

# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_path
#
# Sets the path and other parameters of a cache.
# Cache data are stored in files.
# Both the key and file name in a cache are a result of applying the MD5 function to the proxied URL.
# The levels parameter defines hierarchy levels of a cache.
#
proxy_cache_path 'cache' levels=1:2 keys_zone=proxy-cache:8m max_size=1000m inactive=600m;

# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache
#
# Defines a shared memory zone used for caching.
# The same zone can be used in several places.
# The off parameter disables caching inherited from the previous configuration level.
#
proxy_cache proxy-cache;

# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_methods
#
# If the client request method is listed in this directive then the response will be cached. “GET” and “HEAD” methods are always added to the list, though it is recommended to specify them explicitly.
# See also the proxy_no_cache directive.
#
proxy_cache_methods GET HEAD;

# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_min_uses
#
# Sets the number of requests after which the response will be cached.
#
proxy_cache_min_uses 1;

# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_revalidate
#
# Enables revalidation of expired cache items using conditional requests with the “If-Modified-Since” header field.
#
# proxy_cache_revalidate off;

# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_use_stale
#
# Determines in which cases a stale cached response can be used when an error occurs during communication with the proxied server.
# The directive’s parameters match the parameters of the proxy_next_upstream directive.
#
proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504; # error | timeout | invalid_header | updating | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | off

# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_cache_valid
#
# Sets caching time for different response codes.
#
proxy_cache_valid 200 301 302 10m;
proxy_cache_valid 404 1m;
