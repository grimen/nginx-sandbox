
# Nginx: Variables
#   - http://nginx.org/en/docs/http/ngx_http_core_module.html#variables
location /examples/variables {
  access_log 'logs/examples.variables.access.log';
  error_log 'logs/examples.variables.error.log' error;

  default_type 'text/x-plain';

  echo 'arg_name: $arg_name'; # argument name in the request line
  echo 'args: $args'; # arguments in the request line
  echo 'binary_remote_addr: $binary_remote_addr'; # client address in a binary form, value’s length is always 4 bytes
  echo 'body_bytes_sent: $body_bytes_sent'; # number of bytes sent to a client, not counting the response header; this variable is compatible with the “%B” parameter of the mod_log_config Apache module
  echo 'bytes_sent: $bytes_sent'; # number of bytes sent to a client
  echo 'connection: $connection'; # connection serial number
  echo 'connection_requests: $connection_requests'; # current number of requests made through a connection
  echo 'content_length: $content_length'; # “Content-Length” request header field
  echo 'content_type: $content_type'; # “Content-Type” request header field
  echo 'cookie_name: $cookie_name'; # the name cookie
  echo 'document_root: $document_root'; # the name cookie
  echo 'document_uri: $document_uri'; # same as $uri
  echo 'host: $host'; # in this order of precedence: host name from the request line, or host name from the “Host” request header field, or the server name matching a request
  echo 'http_name: $http_name'; # arbitrary request header field; the last part of a variable name is the field name converted to lower case with dashes replaced by underscores
  echo 'http_cookie: $http_cookie'; #
  echo 'http_user_agent: $http_user_agent'; #
  echo 'https: $https'; # “on” if connection operates in SSL mode, or an empty string otherwise
  echo 'is_args: $is_args'; # “?” if a request line has arguments, or an empty string otherwise
  echo 'limit_rate: $limit_rate'; # setting this variable enables response rate limiting; see limit_rate
  echo 'msec: $msec'; # current time in seconds with the milliseconds resolution
  echo 'nginx_version: $nginx_version'; # nginx version
  echo 'pid: $pid'; # PID of the worker process
  echo 'pipe: $pipe'; # “p” if request was pipelined, “.” otherwise
  echo 'query_string: $query_string'; # same as $args
  echo 'realpath_root: $realpath_root'; # an absolute pathname corresponding to the root or alias directive’s value for the current request, with all symbolic links resolved to real paths
  echo 'remote_addr: $remote_addr'; # client address
  echo 'remote_port: $remote_port'; # client port
  echo 'remote_user: $remote_user'; # user name supplied with the Basic authentication
  echo 'request: $request'; # full original request line
  echo 'request_body: $request_body'; # request body
  echo 'request_body_file: $request_body_file'; # name of a temporary file with the request body
  echo 'request_completion: $request_completion'; # “OK” if a request has completed, or an empty string otherwise
  echo 'request_filename: $request_filename'; # file path for the current request, based on the root or alias directives, and the request URI
  echo 'request_length: $request_length'; # request length (including request line, header, and request body)
  echo 'request_method: $request_method'; # request method
  echo 'request_time: $request_time'; # request processing time in seconds with a milliseconds resolution; time elapsed since the first bytes were read from the client
  echo 'request_uri: $request_uri'; # full original request URI (with arguments)
  echo 'scheme: $scheme'; # request scheme, “http” or “https”
  echo 'sent_http_name: $sent_http_name'; # arbitrary response header field; the last part of a variable name is the field name converted to lower case with dashes replaced by underscores
  echo 'server_addr: $server_addr'; # an address of the server which accepted a request
  echo 'server_name: $server_name'; # name of the server which accepted a request
  echo 'server_port: $server_port'; # name of the server which accepted a request
  echo 'server_protocol: $server_protocol'; # request protocol, usually “HTTP/1.0” or “HTTP/1.1”
  echo 'status: $status'; # response status
  echo 'time_iso8601: $time_iso8601'; # local time in the ISO 8601 standard format
  echo 'time_local: $time_local'; # local time in the ISO 8601 standard format
  echo 'uri: $uri'; # current URI in request, normalized
}
