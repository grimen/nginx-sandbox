
# DOCS:
#   - http://nginx.org/en/docs/
#   - http://nginx.org/en/docs/http/ngx_http_core_module.html#variables

# http://wiki.nginx.org/CoreModule#daemon
#
# Run as daemon?
#
daemon off;

# http://wiki.nginx.org/CoreModule#pid
#
# Master process PID.
#
pid 'tmp/nginx.pid';

# If the master process is run as root, then nginx will setuid()/setgid() to USER/GROUP.
# If GROUP is not specified, then nginx uses the same name as USER.
# By default it's nobody user and nobody or nogroup group or the --user=USER and --group=GROUP from the ./configure script.
# user nginx nginx;

# http://wiki.nginx.org/CoreModule#worker_priority
#
# A worker process is a single-threaded process.
#
worker_processes 4; # ...assuming 2 cores.

# http://wiki.nginx.org/CoreModule#worker_priority
#
# With this option you can give to all worker processes the priority you need/wish.
#
# worker_priority -5;

# http://wiki.nginx.org/CoreModule#worker_cpu_affinity
#
# Your OS may schedule all workers on single CPU/core this can be avoided using this directive.
#
# worker_cpu_affinity 01 10; # ...assuming 2 cores. OSX: disable

# http://wiki.nginx.org/CoreModule#worker_rlimit_nofile
#
# Number of file descriptors used for Nginx.
# This is set in the OS with `ulimit -n 10240` or using /etc/security/limits.conf
#
worker_rlimit_nofile 10240; # ...assuming 10240 file descriptors.

# http://wiki.nginx.org/CoreModule#error_log
#
# Global error logs.
#
error_log 'logs/error.log';

# http://wiki.nginx.org/CoreModule#pcre_jit
#
# PCRE/JIT.
#
pcre_jit on;

# Events
events {
  # http://wiki.nginx.org/EventsModule#worker_connections
  #
  # This sets the number of connections that each worker can handle.
  # You can determine the value by using `ulimit -n` command which output is something like 1024, then your worker connections would need to be set to 1024 or less but 1024 is a good default setting.
  # You can work out the maximum clients value by multiplying this and the worker_processes settings.
  #
  worker_connections 10240; # ...assuming 10240 file descriptors.

  # http://wiki.nginx.org/EventsModule#use
  #
  # Essential for linux, optmized to serve many clients with each thread.
  #
  # use epoll; # OSX: disable

  # http://wiki.nginx.org/EventsModule#multi_accept
  #
  # Accept as many connections as possible, after nginx gets notification about a new connection.
  # May flood worker_connections, if that option is set too low.
  #
  # multi_accept on;
}

# HTTP
http {

  # -----------------------
  #  Defaults
  # --------------------

  include 'http/buffers.conf';
  include 'http/common.conf';
  include 'http/dns.conf';
  include 'http/gzip.conf';
  include 'http/limit.conf';
  include 'http/lua.conf';
  include 'http/log.conf';
  include 'http/mime.conf';
  include 'http/proxy.conf';
  include 'http/proxy_cache.conf';
  include 'http/ssl.conf';
  include 'http/tcp.conf';
  include 'http/timeout.conf';
  include 'http/tmp.conf';


  # -----------------------
  #  Upstream/Servers
  # --------------------

  # upstream app {
  #   server 127.0.0.1:8080;
  # }


  # -----------------------
  #  Server
  # --------------------

  # NOTE: For WebSocket.
  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }

  server {
    server_name nginx-sandbox.dev;

    # posix: so_keepalive=2s:2s:8
    listen 8080 default so_keepalive=on; # http
    listen 4433 default ssl spdy so_keepalive=on; # https + spdy

    root 'public';

    charset utf-8;


    # -----------------------
    #  SSL
    #   - https://coderwall.com/p/4k6wdq
    # --------------------

    ssl_certificate 'ssl/ca.crt';
    ssl_certificate_key 'ssl/ca.key';


    # -----------------------
    #  Proxies/Backends
    # --------------------

    # location @backend {
    #   proxy_set_header Host $host;
    #   proxy_set_header X-Forwarded-Host $host;
    #   proxy_set_header X-Real-IP $remote_addr;
    #   proxy_set_header X-Forwarded-For $remote_addr;
    #   proxy_pass 'http://server:$server_port';
    # }


    # -----------------------
    #  Prepare: Request
    # --------------------

    set $referer 'no-referer';
    if ($http_referer) {
      set $referer $http_referer;
    }

    # -----------------------
    #  Prepare: Response
    # --------------------

    more_set_headers 'Vary: Accept, Accept-Encoding';

    # Prevent of loading site inside iframe.
    more_set_headers 'X-Frame-Options: SAMEORIGIN'; # DENY | SAMEORIGIN | ALLOW-FROM uri

    # Tells the browser to use HTTPS only for all future requests without any redirection.
    # more_set_headers 'Strict-Transport-Security: max-age=16070400; includeSubdomains';

    more_set_headers 'Access-Control-Allow-Origin: *';
    # more_set_headers 'Access-Control-Allow-Origin: $http_origin';
    more_set_headers 'Access-Control-Allow-Methods: OPTIONS, HEAD, GET';
    more_set_headers 'Access-Control-Max-Age: 3600';
    # more_set_headers 'Access-Control-Allow-Credentials: false';
    # more_set_headers 'Access-Control-Expose-Headers: Age,Cache-Control,Connection,Content-Type,Content-Length,Date,ETag,Expires,Last-Modified,Vary,X-Content-Digest,X-Method,X-Rack-Cache,X-Runtime';
    # more_set_headers 'Access-Control-Allow-Headers: Content-Length,Accept,Accept-Charset,Content-Type,Cache-Control,DNT,Host,If-Modified-Since,Keep-Alive,If-None-Match,Origin,Pragma,User-Agent,X-Mx-ReqToken,X-Method,X-Requested-With';


    # -----------------------
    #  Routes: Accept
    # --------------------

    include 'server.conf';


    # -----------------------
    #  Routes: Special
    # --------------------

    location ~ /test-forbidden {
      return 403;
      break;
    }

    location ~ /\. {
      access_log off;
      log_not_found off;
      deny all;
    }

    location ~ ~$ {
      access_log off;
      log_not_found off;
      deny all;
    }

    # Hidden path.
    # if ($request_filename ~ "admin") {
    #   return 403;
    #   break;
    # }

    # Ignore bots.
    # if ($http_user_agent ~* alltheweb|baidu|bingbot|googlebot|msnbot|slurp) {
    #   return 403;
    #   break;
    # }

    # Only requests to our Host are allowed i.e. localhost.
    # if ($host !~ ^(localhost)$ ) {
    #    return 444;
    #    break;
    # }

    # -----------------------
    #  Routes: Error
    # --------------------

    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;

  }
}